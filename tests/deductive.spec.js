// @ts-check
require('dotenv').config();
const testURL = process.env.URL;
const { test, expect } = require('@playwright/test');

test('deductive analysis without errors', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1500);
  await newPage.getByLabel('Run').click();
  await newPage.getByLabel('', { exact: true }).first().click();
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await page.waitForTimeout(500);
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Test hypothesis' }).click();
  await newPage.getByPlaceholder('Theory').click();
  await newPage.getByPlaceholder('Theory').fill('Test theory is added to the text field');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test hypothesis is in correct form');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Test null hypothesis is in correct form');
  await newPage.getByRole('button', { name: 'Save and continue' }).click();
  await expect(newPage.getByRole('button', { name: 'Yes' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'No' })).toBeEnabled();
  await expect(newPage.getByRole('heading', { name: 'Do the hypotheses fit within the limitations of the data set?' })).toBeVisible();
  await expect(newPage.getByText('You have set hypothesis (H1): Test hypothesis is in correct form')).toBeVisible();
  await expect(newPage.getByText('You have set null hypothesis (H0): Test null hypothesis is in correct form')).toBeVisible();
  await newPage.getByRole('button', { name: 'Yes' }).click();
  await expect(newPage.getByRole('button', { name: 'Open cells' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Run cells' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Delete last cell' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Clear cells' })).toBeEnabled();
});

test('deductive analysis theory and hypothesis errors', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1500);
  await newPage.getByLabel('Run').click();
  await newPage.getByLabel('', { exact: true }).first().click();
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await page.waitForTimeout(500);
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Test hypothesis' }).click();
  await newPage.getByRole('button', { name: 'Save and continue' }).click();
  await expect(newPage.getByText('The theory must contain at least 3 words and must not contain special characters')).toBeVisible();
  await expect(newPage.getByText('The hypothesis must contain at least 3 words and must not contain special characters')).toBeVisible();
  await expect(newPage.getByText('The null hypothesis must contain at least 3 words and must not contain special characters')).toBeVisible();
  await expect(newPage.getByRole('button', { name: 'Save and continue' })).toBeEnabled();
});

test('deductive analysis theory and hypothesis warnings', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1500);
  await newPage.getByLabel('Run').click();
  await newPage.getByLabel('', { exact: true }).first().click();
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await page.waitForTimeout(500);
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Test hypothesis' }).click();
  await newPage.getByPlaceholder('Theory').click();
  await newPage.getByPlaceholder('Theory').fill('Everyone to eats');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Everyone to eats');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Everyone to eats');
  await newPage.getByRole('button', { name: 'Validate input' }).click();
  await expect(newPage.getByText('Warning! The theory does not fill criteria of including a subject, a predicate a')).toBeVisible();
  await expect(newPage.getByText('Warning! The hypothesis does not fill criteria of including a subject, a predica')).toBeVisible();
  await expect(newPage.getByText('Warning! The null hypothesis does not fill criteria of including a subject, a pr')).toBeVisible();
  await expect(newPage.getByRole('button', { name: 'Save and continue' })).toBeEnabled();
  await newPage.getByRole('button', { name: 'Save and continue' }).click();
  await newPage.getByRole('button', { name: 'No' }).click();
  await expect(newPage.getByText('Hypotheses must fit data limitations')).toBeVisible();
});

test('deductive analysis all done shows export buttons', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1500);
  await newPage.getByLabel('Run').click();
  await newPage.getByLabel('', { exact: true }).first().click();
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await page.waitForTimeout(500);
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Test hypothesis' }).click();
  await newPage.getByPlaceholder('Theory').click();
  await newPage.getByPlaceholder('Theory').fill('Everyone wants to move to Turku');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Everyone wants to move to Turku');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Everyone wants to move to Turku');
  await newPage.getByRole('button', { name: 'Validate input' }).click();
  await newPage.getByRole('button', { name: 'Yes' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByPlaceholder('Results').click();
  await newPage.getByPlaceholder('Results').fill('Test results');
  await newPage.getByRole('button', { name: 'Save' }).click();
  await newPage.getByRole('button', { name: 'All done' }).click();
  await expect(newPage.getByRole('button', { name: 'Export to pdf' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Close BringOrder' })).toBeEnabled();
});

test('deductive analysis conclusions includes data limitations', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1500);
  await newPage.getByLabel('Run').click();
  await newPage.getByLabel('', { exact: true }).first().click();
  await newPage.getByLabel('', { exact: true }).first().fill('Animal study');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('iris');
  await newPage.getByLabel('', { exact: true }).nth(1).press('Tab');
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Study about dogs with iris data.');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await page.waitForTimeout(500);
  await newPage.getByRole('button', { name: 'Select' }).click();
  await newPage.getByRole('listbox').selectOption('📁 tests');
  await newPage.getByRole('listbox').selectOption('test_iris.csv');
  await newPage.getByRole('button', { name: 'Select' }).click();
  await newPage.getByRole('button', { name: 'Analyze this data' }).click();
  await newPage.getByRole('button', { name: 'Open cells' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByRole('button', { name: 'Add limitation', exact: true }).click();
  await newPage.getByPlaceholder('Limitation 4').click();
  await newPage.getByPlaceholder('Limitation 4').fill('Data has nothing to do with animals.');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Test hypothesis' }).click();
  await newPage.getByPlaceholder('Theory').click();
  await newPage.getByPlaceholder('Theory').fill('It is said that the dogs are smarter than cats.');
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Dogs are smarter than cats.');
  await newPage.getByLabel('', { exact: true }).nth(2).click();
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Dogs are lot smarter than cats.');
  await newPage.getByRole('button', { name: 'Validate input' }).click();
  await newPage.getByRole('button', { name: 'Yes' }).click();
  await newPage.getByRole('button', { name: 'Open cells' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByPlaceholder('Results').click();
  await newPage.getByPlaceholder('Results').fill('It seems that the dogs are smarter than cats.');
  await newPage.getByRole('button', { name: 'Save' }).click();
  await expect(newPage.getByRole('heading', { name: 'Limitations that were noticed in the data:' })).toBeVisible();
  await expect(newPage.getByText('sepallength is not normally distributed').nth(1)).toBeVisible();
  await expect(newPage.getByText('Data has nothing to do with animals.').nth(1)).toBeVisible();
  await newPage.getByRole('button', { name: 'All done' }).click();
  await newPage.getByRole('button', { name: 'Close BringOrder' }).click();
});
