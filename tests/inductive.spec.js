// @ts-check

require('dotenv').config();
const testURL = process.env.URL;
const { test, expect } = require('@playwright/test');

test('inductive analysis without errors', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1200);
  await newPage.getByLabel('Run').click();
  await newPage.getByRole('button', { name: 'Skip' }).click();
  await newPage.getByLabel('', { exact: true }).first().click({delay: 200});
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Explore data' }).click();
  await expect(newPage.getByRole('heading', { name: 'Data exploration' })).toBeVisible();
  await newPage.getByPlaceholder('Preconception 1', { exact: true }).click();
  await newPage.getByPlaceholder('Preconception 1', { exact: true }).fill('Test preconception');
  await newPage.getByRole('button', { name: 'Save preconceptions' }).click();
  await expect(newPage.getByRole('heading', { name: 'Preconceptions' })).toBeVisible();
  await newPage.getByRole('button', { name: 'Open cells' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Tests');
  await newPage.getByRole('button', { name: 'Submit observation' }).click();
  await expect(newPage.getByRole('heading', { name: 'Observation 1: Tests' })).toBeVisible();
  await newPage.getByRole('button', { name: 'Ready to summarize' }).click();
  await newPage.getByPlaceholder('Summary', { exact: true }).click();
  await newPage.getByPlaceholder('Summary', { exact: true }).fill('Test summary');
  await newPage.getByRole('button', { name: 'Submit summary' }).click();
  await expect(newPage.getByRole('heading', { name: 'Summary: Test summary' })).toBeVisible();
  await newPage.locator('div').filter({ hasText: /^50$/ }).first().click();
  await newPage.getByRole('button', { name: 'Lock evaluation' }).click();
  await newPage.getByLabel('Test preconception').check();
  await newPage.locator('div').filter({ hasText: /^50$/ }).first().click();
  await newPage.getByRole('button', { name: 'Save' }).click();
  await newPage.getByRole('button', { name: 'All done' }).click();
  await expect(newPage.getByRole('button', { name: 'Keep slides' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Delete slides' })).toBeEnabled();
  await newPage.getByRole('button', { name: 'Delete slides' }).click();
  await expect(newPage.getByRole('button', { name: 'Export to pdf' })).toBeEnabled();
  await expect(newPage.getByRole('button', { name: 'Close BringOrder' })).toBeEnabled();
  await newPage.getByRole('button', { name: 'Close BringOrder' }).click();
});

test('inductive analysis with errors', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1200);
  await newPage.getByLabel('Run').click();
  await newPage.getByRole('button', { name: 'Skip' }).click();
  await newPage.getByLabel('', { exact: true }).first().click({delay: 200});
  await newPage.getByLabel('', { exact: true }).first().fill('Test study');
  await newPage.getByLabel('', { exact: true }).nth(1).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test data');
  await newPage.getByLabel('', { exact: true }).nth(2).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Importing test data');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await newPage.getByRole('button', { name: 'Import manually' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByPlaceholder('Limitation 1').click();
  await newPage.getByPlaceholder('Limitation 1').fill('Test limitation');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Explore data' }).click();
  await newPage.getByRole('button', { name: 'Save preconceptions' }).click();
  await expect(newPage.getByText('The preconception cannot be empty or contain special symbols')).toBeVisible();
  await newPage.getByPlaceholder('Preconception 1', { exact: true }).click();
  await newPage.getByPlaceholder('Preconception 1', { exact: true }).fill('Test preconception');
  await newPage.getByRole('button', { name: 'Save preconceptions' }).click();
  await expect(newPage.getByRole('button', { name: 'Ready to summarize' })).toBeDisabled();
  await newPage.getByRole('button', { name: 'Open cells' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByRole('button', { name: 'Submit observation' }).click();
  await expect(newPage.getByText('The observation cannot be empty or contain special symbols')).toBeVisible();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('Test observation');
  await newPage.getByRole('button', { name: 'Submit observation' }).click();
  await newPage.getByRole('button', { name: 'Ready to summarize' }).click();
  await newPage.getByRole('button', { name: 'Submit summary' }).click();
  await expect(newPage.getByText('The summary cannot be empty or contain special symbols')).toBeVisible();
});

test('Data limitations are printed in evaluation', async ({ page, context }) => {
  // @ts-ignore
  await page.goto(testURL);
  const pagePromise = context.waitForEvent('page');
  await page.click('#new-dropdown-button');
  await page.click('#kernel-python3');
  const newPage = await pagePromise;
  await newPage.waitForLoadState();
  await newPage.getByLabel('Edit code here').type('from bring_order import BringOrder\nBringOrder()');
  await page.waitForTimeout(1200);
  await newPage.getByLabel('Run').click();
  await newPage.getByRole('button', { name: 'Skip' }).click();
  await newPage.getByLabel('', { exact: true }).first().click({delay: 200});
  await newPage.getByLabel('', { exact: true }).first().fill('Dogs');
  await newPage.getByLabel('', { exact: true }).nth(1).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(1).fill('iris');
  await newPage.getByLabel('', { exact: true }).nth(2).click({delay: 200});
  await newPage.getByLabel('', { exact: true }).nth(2).fill('Data including nothing about dogs.');
  await newPage.getByRole('button', { name: 'Save description' }).click();
  await newPage.getByRole('button', { name: 'Select' }).click();
  await newPage.getByRole('listbox').selectOption('üìÅ tests');
  await newPage.getByRole('listbox').selectOption('test_iris.csv');
  await newPage.getByRole('button', { name: 'Select' }).click({delay: 200});
  await newPage.getByRole('button', { name: 'Analyze this data' }).click();
  await newPage.getByRole('button', { name: 'Check limitations' }).click();
  await newPage.getByRole('button', { name: 'Add limitation', exact: true }).click();
  await newPage.getByPlaceholder('Limitation 4').click();
  await newPage.getByPlaceholder('Limitation 4').fill('Nothing about the dogs.');
  await newPage.getByRole('button', { name: 'Start analysis' }).click();
  await newPage.getByRole('button', { name: 'Explore data' }).click();
  await newPage.getByPlaceholder('Preconception 1').click();
  await newPage.getByPlaceholder('Preconception 1').fill('Dogs are as smart as cats');
  await newPage.getByRole('button', { name: 'Save preconceptions' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByRole('button', { name: 'Open cells' }).click();
  await newPage.getByRole('button', { name: 'Run cells' }).click();
  await newPage.getByLabel('', { exact: true }).nth(1).click();
  await newPage.getByLabel('', { exact: true }).nth(1).fill('dogs are smarter than cats.');
  await newPage.getByRole('button', { name: 'Submit observation' }).click();
  await newPage.getByRole('button', { name: 'Ready to summarize' }).click();
  await newPage.getByPlaceholder('Summary').click();
  await newPage.getByPlaceholder('Summary').fill('Dogs are smarter than cats!');
  await newPage.getByRole('button', { name: 'Submit summary' }).click();
  await newPage.getByRole('button', { name: 'Lock evaluation' }).click();
  await newPage.locator('label').filter({ hasText: 'Dogs are as smart as cats' }).click();
  await expect(newPage.locator('label').filter({ hasText: 'Dogs are as smart as cats' })).toBeChecked();
  await newPage.getByRole('button', { name: 'Save' }).click();
  await expect(newPage.getByText('Nothing about the dogs.').nth(3)).toBeVisible();
  await expect(newPage.getByRole('heading', { name: 'Limitations that were noticed in the data:' })).toBeVisible();
  await newPage.getByRole('button', { name: 'All done' }).click();
  await newPage.getByRole('button', { name: 'Delete slides' }).click();
  await newPage.getByRole('button', { name: 'Close BringOrder' }).click();
});
